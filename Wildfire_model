{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ee1126d1",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-27T14:14:07.698530Z",
     "iopub.status.busy": "2024-09-27T14:14:07.697987Z",
     "iopub.status.idle": "2024-09-27T14:14:08.646161Z",
     "shell.execute_reply": "2024-09-27T14:14:08.644887Z"
    },
    "papermill": {
     "duration": 0.959011,
     "end_time": "2024-09-27T14:14:08.649244",
     "exception": false,
     "start_time": "2024-09-27T14:14:07.690233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "# for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "#     for filename in filenames:\n",
    "#         print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "33a80a4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T14:14:08.661949Z",
     "iopub.status.busy": "2024-09-27T14:14:08.661373Z",
     "iopub.status.idle": "2024-09-27T14:14:24.724231Z",
     "shell.execute_reply": "2024-09-27T14:14:24.723284Z"
    },
    "papermill": {
     "duration": 16.072283,
     "end_time": "2024-09-27T14:14:24.727008",
     "exception": false,
     "start_time": "2024-09-27T14:14:08.654725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import shutil\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from tensorflow.keras.applications import MobileNetV2\n",
    "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8b039e12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T14:14:24.739724Z",
     "iopub.status.busy": "2024-09-27T14:14:24.738985Z",
     "iopub.status.idle": "2024-09-27T14:20:17.537685Z",
     "shell.execute_reply": "2024-09-27T14:20:17.536292Z"
    },
    "papermill": {
     "duration": 352.80831,
     "end_time": "2024-09-27T14:20:17.540704",
     "exception": false,
     "start_time": "2024-09-27T14:14:24.732394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# AS DATASET IS ALREADY ARRANGED, NO NEED OF THIS PORTION\n",
    "def combine_datasets(original_dir, target_dir):\n",
    "    if not os.path.exists(target_dir):\n",
    "        os.makedirs(target_dir)\n",
    "\n",
    "    classes = ['wildfire', 'nowildfire']\n",
    "    \n",
    "    paths = {\n",
    "        'wildfire': '/kaggle/input/wildfire-prediction-dataset/train/wildfire',\n",
    "        'nowildfire': '/kaggle/input/wildfire-prediction-dataset/train/nowildfire'\n",
    "    }\n",
    "    \n",
    "    for cls in classes:\n",
    "        original_path = paths[cls]\n",
    "        target_class_dir = os.path.join(target_dir, cls)\n",
    "        \n",
    "        if not os.path.exists(target_class_dir):\n",
    "            os.makedirs(target_class_dir)\n",
    "        \n",
    "        # Copy original images\n",
    "        for filename in os.listdir(original_path):\n",
    "            source_file = os.path.join(original_path, filename)\n",
    "            shutil.copy(source_file, target_class_dir)\n",
    "\n",
    "# Use the writable output directory in Kaggle for the combined data\n",
    "original_dir = '/kaggle/input/wildfire-prediction-dataset/train'\n",
    "target_dir = '/kaggle/working/combined_data'\n",
    "combine_datasets(original_dir, target_dir)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "49626537",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T14:20:17.553830Z",
     "iopub.status.busy": "2024-09-27T14:20:17.553023Z",
     "iopub.status.idle": "2024-09-27T14:20:21.329618Z",
     "shell.execute_reply": "2024-09-27T14:20:21.328420Z"
    },
    "papermill": {
     "duration": 3.786228,
     "end_time": "2024-09-27T14:20:21.332463",
     "exception": false,
     "start_time": "2024-09-27T14:20:17.546235",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "\n",
    "def remove_corrupted_images(directory):\n",
    "    for root, dirs, files in os.walk(directory):\n",
    "        for filename in files:\n",
    "            file_path = os.path.join(root, filename)\n",
    "            try:\n",
    "                with Image.open(file_path) as img:\n",
    "                    img.verify()  # Verify that it is an image\n",
    "            except (IOError, SyntaxError) as e:\n",
    "                print(f\"Removing corrupted image: {file_path}\")\n",
    "                os.remove(file_path)\n",
    "\n",
    "# Clean both the wildfire and no wildfire directories in the working directory\n",
    "remove_corrupted_images('/kaggle/working/combined_data/wildfire')\n",
    "remove_corrupted_images('/kaggle/working/combined_data/nowildfire')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "02c20dd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T14:20:21.345846Z",
     "iopub.status.busy": "2024-09-27T14:20:21.345040Z",
     "iopub.status.idle": "2024-09-27T14:21:29.223208Z",
     "shell.execute_reply": "2024-09-27T14:21:29.221501Z"
    },
    "papermill": {
     "duration": 67.887825,
     "end_time": "2024-09-27T14:21:29.226161",
     "exception": false,
     "start_time": "2024-09-27T14:20:21.338336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removing corrupted image: /kaggle/working/combined_data/nowildfire/-114.152378,51.027198.jpg\n"
     ]
    }
   ],
   "source": [
    "def repair_corrupted_images(directory):\n",
    "    for root, dirs, files in os.walk(directory):\n",
    "        for filename in files:\n",
    "            file_path = os.path.join(root, filename)\n",
    "            try:\n",
    "                with Image.open(file_path) as img:\n",
    "                    img.load()  # Force loading of the image data\n",
    "                    img.save(file_path)  # Save image to potentially repair any issues\n",
    "            except (IOError, SyntaxError) as e:\n",
    "                print(f\"Removing corrupted image: {file_path}\")\n",
    "                os.remove(file_path)\n",
    "\n",
    "# Repair images in the combined dataset\n",
    "repair_corrupted_images('/kaggle/working/combined_data/wildfire')\n",
    "repair_corrupted_images('/kaggle/working/combined_data/nowildfire')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "75fdffa7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T14:21:29.239447Z",
     "iopub.status.busy": "2024-09-27T14:21:29.238966Z",
     "iopub.status.idle": "2024-09-27T14:21:30.279938Z",
     "shell.execute_reply": "2024-09-27T14:21:30.278638Z"
    },
    "papermill": {
     "duration": 1.050505,
     "end_time": "2024-09-27T14:21:30.282440",
     "exception": false,
     "start_time": "2024-09-27T14:21:29.231935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 25713 images belonging to 2 classes.\n",
      "Found 4536 images belonging to 2 classes.\n",
      "Data generators are set up correctly.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Set up the ImageDataGenerator for data augmentation and rescaling\n",
    "datagen = ImageDataGenerator(rescale=1./255, validation_split=0.15)\n",
    "\n",
    "# Load the training and validation data\n",
    "train_generator = datagen.flow_from_directory(\n",
    "    '/kaggle/working/combined_data',\n",
    "    target_size=(224, 224),\n",
    "    batch_size=32,\n",
    "    class_mode='binary',\n",
    "    subset='training'\n",
    ")\n",
    "\n",
    "validation_generator = datagen.flow_from_directory(\n",
    "    '/kaggle/working/combined_data',\n",
    "    target_size=(224, 224),\n",
    "    batch_size=32,\n",
    "    class_mode='binary',\n",
    "    subset='validation'\n",
    ")\n",
    "\n",
    "print(\"Data generators are set up correctly.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "120606d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T14:21:30.296150Z",
     "iopub.status.busy": "2024-09-27T14:21:30.295696Z",
     "iopub.status.idle": "2024-09-27T14:21:31.888531Z",
     "shell.execute_reply": "2024-09-27T14:21:31.887206Z"
    },
    "papermill": {
     "duration": 1.60399,
     "end_time": "2024-09-27T14:21:31.892437",
     "exception": false,
     "start_time": "2024-09-27T14:21:30.288447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224_no_top.h5\n",
      "\u001b[1m9406464/9406464\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"
     ]
    }
   ],
   "source": [
    "# Load the base model\n",
    "base_model = MobileNetV2(input_shape=(224, 224, 3), include_top=False, weights='imagenet')\n",
    "\n",
    "# Add new layers on top\n",
    "x = base_model.output\n",
    "x = GlobalAveragePooling2D()(x)\n",
    "x = Dense(128, activation='relu')(x)\n",
    "predictions = Dense(1, activation='sigmoid')(x)\n",
    "\n",
    "# Create the full model\n",
    "model = Model(inputs=base_model.input, outputs=predictions)\n",
    "\n",
    "# Freeze the base model layers\n",
    "for layer in base_model.layers:\n",
    "    layer.trainable = False\n",
    "\n",
    "# Compile the model\n",
    "model.compile(optimizer=Adam(learning_rate=0.0001), loss='binary_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6778b786",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T14:21:31.914275Z",
     "iopub.status.busy": "2024-09-27T14:21:31.913011Z",
     "iopub.status.idle": "2024-09-27T16:24:57.272268Z",
     "shell.execute_reply": "2024-09-27T16:24:57.270259Z"
    },
    "papermill": {
     "duration": 7405.874636,
     "end_time": "2024-09-27T16:24:57.776666",
     "exception": false,
     "start_time": "2024-09-27T14:21:31.902030",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
      "  self._warn_if_super_not_called()\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m804/804\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m682s\u001b[0m 840ms/step - accuracy: 0.9034 - loss: 0.2348 - val_accuracy: 0.9676 - val_loss: 0.0906\n",
      "Epoch 2/10\n",
      "\u001b[1m804/804\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m682s\u001b[0m 848ms/step - accuracy: 0.9507 - loss: 0.1311 - val_accuracy: 0.9696 - val_loss: 0.0896\n",
      "Epoch 3/10\n",
      "\u001b[1m804/804\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m684s\u001b[0m 850ms/step - accuracy: 0.9592 - loss: 0.1121 - val_accuracy: 0.9678 - val_loss: 0.0897\n",
      "Epoch 4/10\n",
      "\u001b[1m804/804\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m743s\u001b[0m 852ms/step - accuracy: 0.9651 - loss: 0.1007 - val_accuracy: 0.9729 - val_loss: 0.0797\n",
      "Epoch 5/10\n",
      "\u001b[1m804/804\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m738s\u001b[0m 847ms/step - accuracy: 0.9666 - loss: 0.0940 - val_accuracy: 0.9744 - val_loss: 0.0715\n",
      "Epoch 6/10\n",
      "\u001b[1m804/804\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m784s\u001b[0m 974ms/step - accuracy: 0.9685 - loss: 0.0873 - val_accuracy: 0.9713 - val_loss: 0.0788\n",
      "Epoch 7/10\n",
      "\u001b[1m804/804\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m760s\u001b[0m 945ms/step - accuracy: 0.9736 - loss: 0.0770 - val_accuracy: 0.9742 - val_loss: 0.0778\n",
      "Epoch 8/10\n",
      "\u001b[1m804/804\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m763s\u001b[0m 948ms/step - accuracy: 0.9762 - loss: 0.0710 - val_accuracy: 0.9713 - val_loss: 0.0801\n",
      "Epoch 9/10\n",
      "\u001b[1m804/804\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m800s\u001b[0m 946ms/step - accuracy: 0.9782 - loss: 0.0656 - val_accuracy: 0.9711 - val_loss: 0.0772\n",
      "Epoch 10/10\n",
      "\u001b[1m804/804\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m768s\u001b[0m 955ms/step - accuracy: 0.9786 - loss: 0.0615 - val_accuracy: 0.9691 - val_loss: 0.0850\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Train the model\n",
    "history = model.fit(\n",
    "    train_generator,\n",
    "    validation_data=validation_generator,\n",
    "    epochs=10\n",
    ")\n",
    "\n",
    "# Save the model\n",
    "model.save('/kaggle/working/wildfire_model.h5')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "418de158",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T16:24:59.368385Z",
     "iopub.status.busy": "2024-09-27T16:24:59.367453Z",
     "iopub.status.idle": "2024-09-27T16:24:59.677985Z",
     "shell.execute_reply": "2024-09-27T16:24:59.676659Z"
    },
    "papermill": {
     "duration": 1.104004,
     "end_time": "2024-09-27T16:24:59.681828",
     "exception": false,
     "start_time": "2024-09-27T16:24:58.577824",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save the model\n",
    "model.save('wildfire_model.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "12bd9ed3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T16:25:01.344600Z",
     "iopub.status.busy": "2024-09-27T16:25:01.344143Z",
     "iopub.status.idle": "2024-09-27T16:26:18.324162Z",
     "shell.execute_reply": "2024-09-27T16:26:18.322905Z"
    },
    "papermill": {
     "duration": 77.777134,
     "end_time": "2024-09-27T16:26:18.327392",
     "exception": false,
     "start_time": "2024-09-27T16:25:00.550258",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# AS DATASET IS ALREADY ARRANGED, NO NEED OF THIS PORTION\n",
    "def combine_datasets(original_dir, target_dir):\n",
    "    if not os.path.exists(target_dir):\n",
    "        os.makedirs(target_dir)\n",
    "\n",
    "    classes = ['wildfire', 'nowildfire']\n",
    "    \n",
    "    paths = {\n",
    "        'wildfire': '/kaggle/input/wildfire-prediction-dataset/test/wildfire',\n",
    "        'nowildfire': '/kaggle/input/wildfire-prediction-dataset/test/nowildfire'\n",
    "    }\n",
    "    \n",
    "    for cls in classes:\n",
    "        original_path = paths[cls]\n",
    "        target_class_dir = os.path.join(target_dir, cls)\n",
    "        \n",
    "        if not os.path.exists(target_class_dir):\n",
    "            os.makedirs(target_class_dir)\n",
    "        \n",
    "        # Copy original images\n",
    "        for filename in os.listdir(original_path):\n",
    "            source_file = os.path.join(original_path, filename)\n",
    "            shutil.copy(source_file, target_class_dir)\n",
    "\n",
    "# Use the writable output directory in Kaggle for the combined data\n",
    "original_dir = '/kaggle/input/wildfire-prediction-dataset/test'\n",
    "target_dir = '/kaggle/working/test'\n",
    "combine_datasets(original_dir, target_dir)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c72991e4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T16:26:19.987518Z",
     "iopub.status.busy": "2024-09-27T16:26:19.986818Z",
     "iopub.status.idle": "2024-09-27T16:26:35.405429Z",
     "shell.execute_reply": "2024-09-27T16:26:35.404259Z"
    },
    "papermill": {
     "duration": 16.274568,
     "end_time": "2024-09-27T16:26:35.408290",
     "exception": false,
     "start_time": "2024-09-27T16:26:19.133722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removing corrupted image: /kaggle/working/test/wildfire/-73.15884,46.38819.jpg\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Clean both the wildfire and no wildfire directories in the working directory\n",
    "remove_corrupted_images('/kaggle/working/test/wildfire')\n",
    "remove_corrupted_images('/kaggle/working/test/nowildfire')\n",
    "\n",
    "# Repair images in the combined dataset\n",
    "repair_corrupted_images('/kaggle/working/test/wildfire')\n",
    "repair_corrupted_images('/kaggle/working/test/nowildfire')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3d322747",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T16:26:36.989124Z",
     "iopub.status.busy": "2024-09-27T16:26:36.988466Z",
     "iopub.status.idle": "2024-09-27T16:29:07.002663Z",
     "shell.execute_reply": "2024-09-27T16:29:07.001175Z"
    },
    "papermill": {
     "duration": 150.806003,
     "end_time": "2024-09-27T16:29:07.005413",
     "exception": false,
     "start_time": "2024-09-27T16:26:36.199410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 6299 images belonging to 2 classes.\n",
      "\u001b[1m197/197\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m149s\u001b[0m 737ms/step - accuracy: 0.9689 - loss: 0.0762\n",
      "Test accuracy: 0.97\n"
     ]
    }
   ],
   "source": [
    "# (Optional) Load and evaluate the model\n",
    "test_generator = datagen.flow_from_directory(\n",
    "    '/kaggle/working/test',  # Adjusted for your test dataset\n",
    "    target_size=(224, 224),\n",
    "    batch_size=32,\n",
    "    class_mode='binary'\n",
    ")\n",
    "\n",
    "# Load the saved model\n",
    "loaded_model = tf.keras.models.load_model('wildfire_model.h5')\n",
    "\n",
    "# Evaluate the model\n",
    "test_loss, test_acc = loaded_model.evaluate(test_generator)\n",
    "print(f'Test accuracy: {test_acc:.2f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "36312e72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T16:29:08.621344Z",
     "iopub.status.busy": "2024-09-27T16:29:08.619868Z",
     "iopub.status.idle": "2024-09-27T16:29:08.626849Z",
     "shell.execute_reply": "2024-09-27T16:29:08.625427Z"
    },
    "papermill": {
     "duration": 0.817428,
     "end_time": "2024-09-27T16:29:08.629799",
     "exception": false,
     "start_time": "2024-09-27T16:29:07.812371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import shutil\n",
    "\n",
    "# def zip_directories(base_dir, directories, output_filename):\n",
    "#     temp_dir = '/kaggle/working/temp_archive'\n",
    "#     os.makedirs(temp_dir, exist_ok=True)\n",
    "    \n",
    "#     for directory in directories:\n",
    "#         full_path = os.path.join(base_dir, directory)\n",
    "#         if os.path.exists(full_path):\n",
    "#             shutil.copytree(full_path, os.path.join(temp_dir, os.path.basename(full_path)))\n",
    "#         else:\n",
    "#             print(f\"Warning: {full_path} does not exist\")\n",
    "\n",
    "#     shutil.make_archive(output_filename, 'zip', temp_dir)\n",
    "#     shutil.rmtree(temp_dir)  # Clean up\n",
    "\n",
    "# # Directories to include in the zip file\n",
    "# directories_to_zip = ['test', 'combined_data']\n",
    "# zip_directories('/kaggle/working', directories_to_zip, 'Output_Files')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fa901eeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T16:29:10.306094Z",
     "iopub.status.busy": "2024-09-27T16:29:10.305451Z",
     "iopub.status.idle": "2024-09-27T16:29:10.311481Z",
     "shell.execute_reply": "2024-09-27T16:29:10.310341Z"
    },
    "papermill": {
     "duration": 0.813381,
     "end_time": "2024-09-27T16:29:10.314084",
     "exception": false,
     "start_time": "2024-09-27T16:29:09.500703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# os.remove('/kaggle/working/Output_Files.zip')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "cb299f3e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-27T16:29:12.026357Z",
     "iopub.status.busy": "2024-09-27T16:29:12.025709Z",
     "iopub.status.idle": "2024-09-27T16:29:13.569784Z",
     "shell.execute_reply": "2024-09-27T16:29:13.568510Z"
    },
    "papermill": {
     "duration": 2.448194,
     "end_time": "2024-09-27T16:29:13.572675",
     "exception": false,
     "start_time": "2024-09-27T16:29:11.124481",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1a7b5ef2b53243c4aa5450e8a2cbfd99",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FileUpload(value={}, accept='image/*', description='Upload')"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "064a83b94bfc43abb6131710fdd4aaf7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.preprocessing.image import load_img, img_to_array\n",
    "import numpy as np\n",
    "from IPython.display import display\n",
    "import ipywidgets as widgets\n",
    "import io\n",
    "\n",
    "# Step 1: Load the trained model\n",
    "model = tf.keras.models.load_model('/kaggle/input/wildfiremodel/tensorflow2/default/1/wildfire_model.h5')\n",
    "\n",
    "# Prepare the image for prediction\n",
    "def prepare_image(image_file, target_size=(224, 224)):\n",
    "    # Load the image\n",
    "    img = load_img(image_file, target_size=target_size)\n",
    "    \n",
    "    # Convert the image to a numpy array\n",
    "    img_array = img_to_array(img)\n",
    "    \n",
    "    # Rescale the image (as done during model training)\n",
    "    img_array = img_array / 255.0\n",
    "    \n",
    "    # Expand dimensions to match the input shape of the model (batch_size, height, width, channels)\n",
    "    img_array = np.expand_dims(img_array, axis=0)\n",
    "    \n",
    "    return img_array\n",
    "\n",
    "# Make a prediction on a new image\n",
    "def predict_image(image_file):\n",
    "    # Prepare the image\n",
    "    img_array = prepare_image(image_file)\n",
    "    \n",
    "    # Make the prediction\n",
    "    prediction = model.predict(img_array)\n",
    "    \n",
    "    # Convert prediction to class label\n",
    "    if prediction[0] > 0.5:\n",
    "        return \"Risk of Wildfire\"\n",
    "    else:\n",
    "        return \"No risk of Wildfire\"\n",
    "\n",
    "# Set up the file upload widget\n",
    "upload = widgets.FileUpload(accept='image/*', multiple=False)\n",
    "\n",
    "def on_upload_change(change):\n",
    "    # Clear previous outputs\n",
    "    output.clear_output()\n",
    "    \n",
    "    # Process uploaded files\n",
    "    for filename, file_info in upload.value.items():\n",
    "        # Convert the file info to a BytesIO object\n",
    "        image_file = io.BytesIO(file_info['content'])\n",
    "        \n",
    "        # Make a prediction on the uploaded image\n",
    "        result = predict_image(image_file)\n",
    "        \n",
    "        with output:\n",
    "            print(f'The image is predicted as: {result}')\n",
    "\n",
    "upload.observe(on_upload_change, names='value')\n",
    "display(upload)\n",
    "\n",
    "# Create an output widget to display results\n",
    "output = widgets.Output()\n",
    "display(output)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 2860500,
     "sourceId": 4932759,
     "sourceType": "datasetVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 109579,
     "modelInstanceId": 85358,
     "sourceId": 101819,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8112.315694,
   "end_time": "2024-09-27T16:29:16.905035",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-27T14:14:04.589341",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "064a83b94bfc43abb6131710fdd4aaf7": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_3325371ae6524042b63d354b5e6b07ee",
       "msg_id": "",
       "outputs": []
      }
     },
     "1a7b5ef2b53243c4aa5450e8a2cbfd99": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "FileUploadModel",
      "state": {
       "_counter": 0,
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "FileUploadModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "FileUploadView",
       "accept": "image/*",
       "button_style": "",
       "data": [],
       "description": "Upload",
       "description_tooltip": null,
       "disabled": false,
       "error": "",
       "icon": "upload",
       "layout": "IPY_MODEL_77cabe08857a45948f7374d51777d394",
       "metadata": [],
       "multiple": false,
       "style": "IPY_MODEL_44430421e4694424a171457f61fd58fb"
      }
     },
     "3325371ae6524042b63d354b5e6b07ee": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "44430421e4694424a171457f61fd58fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ButtonStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ButtonStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "button_color": null,
       "font_weight": ""
      }
     },
     "77cabe08857a45948f7374d51777d394": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
